<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFVQ
        RwBVUEcSVE5EP1dLQwlVTUIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABTTkIAVlFIDlFLPopRSTvqUkw/ellPRwlYTkUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAVE9FAFRQRhBSSz6JT0g49k9HN/9QSjvmVE9EPVRPRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAFNNQgBWUUcOUUs+iU9IOPRPRzf/UEg59lNNQIdYVEwQV1NKAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABUT0UAVVBGEFFLPohPSDj2T0c3/1BIOfNTTUGGWVdQDVZRRwAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAX19fAFxcXABgYGAGYGBgEGFhYRVhYWEXYWFhFGBg
        YA1gYGADX19fAAAAAAAAAAAAU01BAFNNQQxRSz6JT0g49E9HN/9QSDn2U01Bh1hVTRBXVEsAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXl5eAGNjYwBgYGAUYWFhUWFhYZJgYGDBYGFh3WBh
        YeRgYWHWYGBhtGFhYXxhYWE9YGBgCmBgYABjZGcIWldSelFKPfVPRzf/UEg59FNMQIZZVk8NVlBGAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGJiYgBiYmIGYGBgTGFhYbVfYGHzYmFh/2hl
        Yf9tZ2H/bmhh/2xnYf9mZGH/YGBh/19gYeZhYWGZYWFhMmBgYGlhYGDrWlZR/1FKPfVSTUGHV1VNEFZU
        SwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgYGAAX19fDmBgYHhgYGHnYmJh/31x
        Yv+oiWP/ypxj/96oY//kq2T/2aVk/8GWY/+agWP/cmth/2BhYfxgYGDhYGBg8GFhYf9hYGDtXFlUe1RR
        Rw1WU0oAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYGBgAGBgYAlhYWF/YGBh9Wxn
        Yf+pimL/4Khk//a2ZP/3tmT/97Vk//e1ZP/3tWT/97Zk//OzZP/TomP/kHxi/2NiYf9hYWH/YWFh82Fh
        YW9hYmIJYWJiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGBgYABcXFwBYWFhY2Bg
        Ye9vaWH/vZZj//O0ZP/4tmT/9rVk//a1ZP/2tWT/9rVk//a1ZP/2tWT/9rVk//i3ZP/ormT/oYVi/2Ri
        Yf9gYGDiYGBgNGBgYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYGBgAGBg
        YCVgYGDTZmNh/7SQY//zs2T/9rVk//a1ZP/2tWT/9rVk//a1ZP/2tWT/9rVk//a1ZP/2tWT/9rVk//e2
        ZP/qrmT/kXxi/2BhYf9hYWGZYWFhCWFhYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG5u
        bgBSUlIAYGBge2BgYfyMeWL/7LBk//e2ZP/2tWT/9rVk//a1ZP/2tWT/9rVk//a1ZP/2tWT/9rVk//a1
        ZP/2tWT/9rVk//i2ZP/ToWP/c2th/2BgYeVhYWE+YGBgAG1tbQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAYGBgAGBgYBZgYWG9ZmRh/8GXY//4tmT/9rVk//a1ZP/2tWT/9rVk//a1ZP/2tWT/9rVk//a1
        ZP/2tWT/9rVk//a1ZP/2tWT/9rVk//OzZP+agWP/YGBh/2FhYXxhYWECYWFhAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABhYWEAYWFhOV9gYeJ8cGL/36hk//i2ZP/2tWT/9rVk//a1ZP/2tWT/9rVk//a1
        ZP/2tWT/9rVk//a1ZP/2tWT/9rVk//a1ZP/2tWT/97Zk/8GXY/9nZGH/YGFhtGFhYQ1hYWEAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAGBgYABgYGBOXl9h94t5Yv/usGT/97Vk//a1ZP/2tWT/9rVk//a1
        ZP/2tWT/9rVk//a1ZP/2tWT/9rVk//a1ZP/2tWT/9rVk//a1ZP/3tWT/2KVj/2xnYf9gYWHVYWFhFGFh
        YQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYWFhAGFhYVZeX2H/knxi//W0ZP/2tWT/9rVk//a1
        ZP/2tWT/9rVk//a1ZP/2tWT/9rVk//a1ZP/2tWT/9rVk//a1ZP/2tWT/9rVk//e1ZP/jqmT/bmhh/2Bg
        YONgYGAXYGBgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgYGAAYGBgUl5fYfuPe2L/8bJk//a1
        ZP/2tWT/9rVk//a1ZP/2tWT/9rVk//a1ZP/2tWT/9rVk//a1ZP/2tWT/9rVk//a1ZP/2tWT/97Vk/96o
        ZP9taGH/YGFh3WFhYRZhYWEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGFhYQBhYWFBX2Bh6oJ0
        Yv/lq2T/97Zk//a1ZP/2tWT/9rVj//a1ZP/2tWT/9rVk//a1ZP/2tWT/9rVk//a1ZP/2tWP/9rVk//a1
        ZP/3tmT/ypxj/2llYf9gYWHBYWFhEGFhYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYWFhAGFh
        YSNgYGHMbWhh/86fY//4tmT/9rVj//e9df/4xoj/9rhq//a1Y//2tWT/9rVk//a1ZP/2tGP/971z//jH
        iv/2uGn/9rVk//e1ZP+oiWL/YmFh/2BgYZJfX18GYGBgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABeXl4AXFxcA2BgYJdgYWH/oIVi//OzZP/2tWP/+MB7//vYr//5zpr/9753//a3aP/2tWX/9rls//jC
        gP/61aj/+dOj//a4av/4tmT/4alk/39yYv9fYGHzYWFhUmFhYQBhYWEAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABgYGAAYGBgQWBgYOpvaWH/zp5j//e1ZP/2tmb/98OA//rVqf/6163/+tKi//nR
        oP/61KX/+tmw//nQnv/2vHT/97Vk//OzZP+qimL/Y2Jh/2BgYLVgYGAVYGBgAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAGBgYABeXl4HYGFhjmBhYfyBc2L/2KRk//e2ZP/2tWT/9rpu//jF
        hv/5zpj/+dCc//nLk//3wX7/9rdp//e1ZP/ztGT/v5Zj/2xnYf9gYWHqYGBgTWFhYQAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXV1dAGBgYABgYGAfYGBgtmBhYf+Bc2L/zp9j//Oz
        ZP/5tmT/97Vj//e1Y//2tWP/97Vj//i2Y//4tmT/7bBk/7SQY/9vaWH/X2Bh9WBgYHxfX18FYWFhAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGBgYABhYWEpYGBguGBh
        YfxvaWH/n4Ri/86eY//lrGT/8bJk//W0ZP/usGT/36hk/8KYY/+Pe2L/ZmRh/2BgYe9gYGCAX19fD19f
        XwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYGBgAF1d
        XQBfX18gYGBgj2BgYOpgYWH9bWhh/4J0Yv+Oe2L/kn1i/4t5Yv97cGL/ZmRh/2BgYftgYGDUYWFhY2Rk
        ZAliYmIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAF5eXgBeXl4IYGBgQWBgYJZgYWHMXl9h6l5fYftdX2H/Xl9h919gYeFgYGG9YGBgfGBg
        YCVfX18DX19fAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgYGAAXFxcBGFhYSNhYWFBYGBgUmBgYFdgYGBOYWFhOWBg
        YBVmZmYAY2NjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////////////H////g////wP///4D///8B//AeA//ABAf/AAAP/gA
        AH/wAAD/4AAB/+AAAP/gAAD/wAAAf8AAAH/AAAB/wAAAf8AAAH/AAAB/wAAAf8AAAP/gAAD/4AAB//AA
        Af/4AAP//AAH//4AD///gH////////////8=
</value>
  </data>
</root>